#!/bin/sh

. @abs_builddir@/VARS

if [ -e COMMON ]; then
  . ./COMMON
else
  . @abs_top_srcdir@/test/COMMON
fi

echo "== On first run, directories should get created"
# show commands that are run
set -x
$RMW_TEST_CMD_STRING || exit $?

echo $SEPARATOR
echo "List the waste folders..."
echo "rmw should display folders on removable devices that are not mounted"
echo $SEPARATOR
output="$($RMW_TEST_CMD_STRING -l)"
test "$output" = "/mnt/fs/Trash-$(id -u)
/mnt/sda10000/example_waste
@abs_top_builddir@/test/rmw-tests-home/test_basic.sh_dir/.Waste
@abs_top_builddir@/test/rmw-tests-home/test_basic.sh_dir/.local/share/Waste-2
@abs_top_builddir@/test/rmw-tests-home/test_basic.sh_dir/.local/share/Waste-3" || exit $?

echo $SEPARATOR

# Make some temporary files
mkdir $RMWTEST_HOME/tmp-files && cd $RMWTEST_HOME/tmp-files || exit $?

echo "\n\n == creating temporary files to be deleted"
set -x
for file in 1 2 3; do
  touch $file || exit $?
done
cd $RMWTEST_HOME/.. || exit $?

echo "\n\n == rmw should be able to operate on multiple files\n"
$RMW_TEST_CMD_STRING --verbose $RMWTEST_HOME/tmp-files/* || exit $?

test -f "${PRIMARY_WASTE_DIR}/files/1" || exit $?
test -f "${PRIMARY_WASTE_DIR}/files/2" || exit $?
test -f "${PRIMARY_WASTE_DIR}/files/3" || exit $?
test -f "${PRIMARY_WASTE_DIR}/info/1.trashinfo" || exit $?
test -f "${PRIMARY_WASTE_DIR}/info/2.trashinfo" || exit $?
test -f "${PRIMARY_WASTE_DIR}/info/3.trashinfo" || exit $?

echo $SEPARATOR
echo "rmw should append a time_string to duplicate files..."
cd $RMWTEST_HOME/tmp-files
for file in 1 2 3; do
  touch $file
done
$RMW_TEST_CMD_STRING 1 2 3 || exit $?

echo "\n\n == Show contents of the files and info directories"
set -x

test -n "$(ls -A $PRIMARY_WASTE_DIR/files)" || exit $?
test -n "$(ls -A $PRIMARY_WASTE_DIR/info)" || exit $?

output="$(ls -A $PRIMARY_WASTE_DIR/files | wc -l | sed 's/ //g')"
test "$output" = "6" || exit $?

echo $SEPARATOR
echo "  == rmw should refuse to move a waste folder or a file that resides within a waste folder"
output="$($RMW_TEST_CMD_STRING $PRIMARY_WASTE_DIR/info)"
test "${output}" = " :warning: $PRIMARY_WASTE_DIR/info resides within a waste folder and has been ignored
0 items were removed to the waste folder" || exit $?

# If the file gets removed (which it shouldn't), then the test that follows it will fail
$RMW_TEST_CMD_STRING $PRIMARY_WASTE_DIR/info/1.trashinfo || exit $?

echo "\n\n == Display contents of 1.trashinfo "
set -x
cat $PRIMARY_WASTE_DIR/info/1.trashinfo || exit $?

echo $SEPARATOR
echo "  == Test -m option"
output=$($RMW_TEST_CMD_STRING --verbose -m) || exit $?
substring=".Waste/files/1_"
test "${output}#*${substring}" != "${output}" || exit $?
substring=".Waste/files/2_"
test "${output}#*${substring}" != "${output}" || exit $?
substring=".Waste/files/3_"
test "${output}#*${substring}" != "${output}" || exit $?

echo $SEPARATOR
echo "  == test undo/restore feature"

set -x
$RMW_TEST_CMD_STRING --verbose -u || exit $?
$RMW_TEST_CMD_STRING --verbose -z $PRIMARY_WASTE_DIR/files/1 || exit $?
$RMW_TEST_CMD_STRING --verbose -z $PRIMARY_WASTE_DIR/files/2 || exit $?
$RMW_TEST_CMD_STRING --verbose -z $PRIMARY_WASTE_DIR/files/3 || exit $?

echo "\n\n == test that the files are restored to their previous locations"

set -x
test -f $RMWTEST_HOME/tmp-files/1 || exit $?
test -f $RMWTEST_HOME/tmp-files/2 || exit $?
test -f $RMWTEST_HOME/tmp-files/3 || exit $?

echo "\n\n == test that the .trashinfo files have been removed"

set -x
test ! -f $PRIMARY_WASTE_DIR/info/1.trashinfo || exit $?
test ! -f $PRIMARY_WASTE_DIR/info/2.trashinfo || exit $?
test ! -f $PRIMARY_WASTE_DIR/info/3.trashinfo || exit $?

echo "Basic tests passed"
exit 0
